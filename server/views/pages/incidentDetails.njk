{% extends "../partials/layout.njk" %}
{% from "../partials/breadCrumb.njk" import breadcrumb %}
{% from "../partials/prisonerPlaybackSection.njk" import prisonerPlaybackSection %}
{% from "../macros/datePicker.njk" import datePicker %}
{% from "../macros/timeInput.njk" import timeInput %}

{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}

{% set isDateError = errors | isErrorPresent(['incidentDate[date]']) %}
{% set isHourError = errors | isErrorPresent(['incidentDate[time][hour]', 'incidentDate[time]']) %}
{% set isMinuteError = errors | isErrorPresent(['incidentDate[time][minute]', 'incidentDate[time]']) %}

{% set title = "Incident details" %}

{% macro dateTimePicker(params) %}
	{{
		datePicker({
			id: params.dateId+'[date]',
			label: params.dateLabel,
			name: params.dateId+'[date]',
			date: params.dateTimeObj.date,
			errorMessage: errors | findErrors([params.dateId+'[date]']),
			attributes: {'data-disable-future-date':'true', 'data-qa': params.dataQaDate },
			classes: 'govuk-input--width-10'
		})
	}}
	{{ 
	timeInput({
		errorMessage: errors | concatErrors([params.dateId+"[time][hour]", params.dateId+"[time][minute]", params.dateId+"[time]"]),
		legend: params.timeLabel,
		hint: 'Use the 24-hour clock. For example, 09 08 or 17 32.',
		hour:  {
			dataQaHour: params.dataQaHour,
			name: params.dateId+'[time][hour]',
			id: params.dateId+'[time][hour]',
			value: params.dateTimeObj.hour,
			classes: ('govuk-input--error' if isHourError)
		},
		minutes:  {
			dataQaMinutes: params.dataQaMinutes,
			name: params.dateId+'[time][minute]',
			id: params.dateId+'[time][minute]',
			value: params.dateTimeObj.minute,
			classes: ('govuk-input--error' if isMinuteError)
		}
	})
}}

{% endmacro %}

{% block pageTitle %}
	{{ title }}
{% endblock %}

{% block beforeContent %}
	{{ breadcrumb() }}
{% endblock %}

{% block content %}
	{% if errors | length %}
		{{ govukErrorSummary({
      titleText: "There is a problem",
      errorList: errors,
      attributes: { "data-qa": "error-summary" }
    }) }}
	{% endif %}

	<h1 class="govuk-heading-l">{{ title }}</h1>

	<div class="prisonerPlaybackSection">
		{{ prisonerPlaybackSection(prisoner.displayName, prisoner.prisonerNumber, prisoner.currentLocation) }}
	</div>

	<div>
		<form method="POST" novalidate="novalidate" class="govuk-!-margin-top-5">
			<input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
            {% if originalReporterUsername != null %}
                <input type="hidden" name="originalReporterUsername" value="{{ originalReporterUsername }}" id="originalReporterUsername"/>
            {% endif %}

			{% include "../partials/reportingOfficer.njk" %}

			<h2 class="govuk-heading-s">When did the incident happen?</h2>
			{{
				dateTimePicker({
					dateTimeObj: data.incidentDate,
					dateId: 'incidentDate',
					dateLabel: 'Date of Incident',
					timeLabel: 'Time of Incident',
					dataQaDate: 'incident-details-date',
					dataQaHour: 'incident-date-hour',
					dataQaMinutes: 'incident-date-minutes'
				})
			}}

			{{
				govukSelect({
					id: 'locationId',
					name: 'locationId',
					label: {
						text: 'Location of incident',
						isPageHeading: false,
						classes: ''
					},
					items: locations | toSelect('locationId', 'userDescription', data.locationId ),
					classes: '',
					errorMessage: 'locationId' | findError(errors)
				})
			}}

{{ govukRadios({
    errorMessage: "discoveryRadioSelected" | findError(errors),
    idPrefix: 'discoveryRadioSelected',
    id: 'discoveryRadioSelected',
    name: 'discoveryRadioSelected',
    attributes: { "data-qa": "radio-buttons-discovery" },
    fieldset: {
        legend: {
        text: "Was the incident discovered at the same time?",
        isPageHeading: false,
        classes: "govuk-fieldset__legend--s"
        }
    },
    items: [
    {
      value: "Yes",
      text: "Yes",
      checked: data.discoveryRadioSelected == 'Yes'
    },
    {
      value: "No",
      text: "No",
      checked: data.discoveryRadioSelected == 'No',
	  conditional:  {
        html: dateTimePicker({
					dateTimeObj: data.discoveryDate,
					dateId: 'discoveryDate',
					dateLabel: 'Date of discovery',
					timeLabel: 'Time of discovery',
					dataQaDate: 'discovery-details-date',
					dataQaHour: 'discovery-date-hour',
					dataQaMinutes: 'discovery-date-minutes'
			})
		}
    }
  ]
    }) }}

			{{ govukButton({
					text: submitButtonText,
					type: "submit",
					classes: "govuk-button--submit govuk-!-margin-right-3",
					attributes: { "data-qa": "incident-details-submit" }
			}) }}
			{% if exitButtonHref %}
				{{ govukButton({
					text: 'Exit',
					element: "a",
					href: exitButtonHref,
					classes: "govuk-button--secondary",
					attributes: { "data-qa": "incident-details-exit" }
				}) }}
			{% endif %}
		</form>
	</div>

{% endblock %}