{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}


{% set rejected %}
	{{
				govukSelect({
					id: 'rejectedReasonId',
					name: 'rejectedReasonId',
         	value: pageData.reason,	
					label: {
						text: 'What is the reason?',
						isPageHeading: false,
						classes: ''
					},
					items: [
            {
               value: "unsuitable",
               text: "Not suitable for an adjudication"
             },
             {
               value: "alternative",
               text: "Should be dealt with in another way"
             },
             {
               value: "expired",
               text: "More than 48 hours have elapsed since the incident"
             }
          ] | toSelect('value', 'text'),
					classes: '',
    			errorMessage: 'rejectedReasonId' | findError(pageData.errors)
				})
        }}

 {{
      govukTextarea({
				name: "rejectedDetails",
				id: "rejectedDetails",
        rows: '8',
				value: pageData.details,
				label: {
					text: "Give more details for why you have rejected it",
					classes: "govuk-!-margin-bottom-2"
				},
				classes: "govuk-!-width-three-quarters",
				attributes: {
					'data-qa': "rejected-details-input"
				},
				errorMessage: "rejectedDetails" | findError(pageData.errors)
				})
			}}
{% endset -%}

{% set returned %}
	{{
				govukSelect({
					id: 'returnedReasonId',
					name: 'returnedReasonId',
        	value: pageData.reason,
					label: {
						text: 'What is the reason?',
						isPageHeading: false,
						classes: ''
					},
				  items: [
                   {
                     value: "details",
                     text: "Incorrect incident details"
                   },
                   {
                     value: "statement",
                     text: "Incorrect or insufficient information in statement"
                   },
                   {
                     value: "offence",
                     text: "Incorrect offence chosen"
                   }
                 ] | toSelect('value', 'text'),
					classes: '',
    			errorMessage: 'returnedReasonId' | findError(pageData.errors)
				}) }}
         {{  govukTextarea({
				name: "returnedDetails",
				id: "returnedDetails",
        rows: '8',
				value: pageData.details,
				label: {
					text: "What does the reporting officer need to know",
					classes: "govuk-!-margin-bottom-2"
				},
				classes: "govuk-!-width-three-quarters",
				attributes: {
					'data-qa': "returned-details-input"
				},
				errorMessage: "returnedDetails" | findError(pageData.errors)
				})
			}}
{% endset -%}

    {{ govukRadios({
    errorMessage: "currentStatusSelected" | findError(pageData.errors),
    idPrefix: 'currentStatusSelected',
    id: 'currentStatusSelected',
    name: 'currentStatusSelected',
    attributes: { "data-qa": "review-radio-buttons" },
    fieldset: {
        legend: {
        text: "What would you like to do with this report?",
        isPageHeading: false,
        classes: "govuk-fieldset__legend--s"
        }
    },
    items: [
    {
      value: "accepted",
      text: "Accept it",
      checked: pageData.status === "ACCEPTED"
    },
    {
      value: "returned",
      text: "Return it to the reporting officer for changes to be made",
      checked: pageData.status === "RETURNED",
      conditional: {
          html: returned
      }
    },
    {
      value: "rejected",
      text: "Reject It",
      checked: pageData.status === "REJECTED",
      conditional: {
         html: rejected
      }
    }
  ]
    }) }}

